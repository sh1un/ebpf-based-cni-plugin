#!/bin/bash

# STEP1 Let's handle what cmd has been invoked by Kublet
case $CNI_COMMAND in
ADD)

    # Let retrieve all the information we need to setup the pod networking
    # Pod cidr of the Node, it should have been passed a value in the config of the cni plugin. 

    podcidr=$(cat /dev/stdin | jq -r ".podcidr")
    gw_ip=$(echo $podcidr | sed "s:0/24:1:g")

    # We need now to define a bridge if it doesn't exist 
    brctl addbr bridge0
    ip link set bridge0 up
    ip addr add "${gw_ip}/24" dev bridge0
    
    # Let's calculate the IP we will assign to our pod 
    n=$(( $RANDOM % 255 + 2 )) # this will give us a random ip between 2 to 255
    ip=$(echo $podcidr | sed "s:0/24:$n:g")

    # It's time now to create veth pair, one end will be $CNI_IFNAME  and the other $host_ifname, then start it 
    host_ifname="veth$n"
    ip link add $CNI_IFNAME type veth peer name $host_ifname
    ip link set $host_ifname up

    # Connect the veth to the bridge 
    ip link set $host_ifname master bridge0

    mkdir -p /var/run/netns/
    ln -sfT $CNI_NETNS /var/run/netns/$CNI_CONTAINERID

    # This moves the network interface specified by $CNI_IFNAME into the network namespace identified by $CNI_CONTAINERID. It essentially connects the interface to the container's network namespace.
    ip link set $CNI_IFNAME netns $CNI_CONTAINERID

    # Generate a random MAC address and set it to the container's interface
    mac=$(printf '02:%02x:%02x:%02x:%02x:%02x' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256] $[RANDOM%256] $[RANDOM%256])
    ip netns exec $CNI_CONTAINERID ip link set dev $CNI_IFNAME address $mac

    # Now we will bring up the network interface, attach the container IP to it then route the traffic through the GW IP we defined earlier
    ip netns exec $CNI_CONTAINERID ip link set $CNI_IFNAME up
    ip netns exec $CNI_CONTAINERID ip addr add $ip/24 dev $CNI_IFNAME
    ip netns exec $CNI_CONTAINERID ip route add default via $gw_ip

    # The MAC address is now the one we generated
    address="${ip}/24"

    # Print the result to stdout, Kublet is expecting the result from the CNI to be printed to stdout
    output_template='
{
  "cniVersion": "1.0.0",
  "interfaces": [                                            
      {
          "name": "%s",
          "mac": "%s",                            
          "sandbox": "%s" 
      }
  ],
  "ips": [
      {
          "version": "4",
          "address": "%s",
          "gateway": "%s",          
          "interface": 0 
      }
  ]
}' 
    
    printf "${output_template}" $CNI_IFNAME $mac $CNI_NETNS $address $gw_ip
    
    #Attaching the eBPF program:
    #tc qdisc add dev $host_ifname clsact
    #tc filter add dev $host_ifname ingress bpf direct-action object-pinned /sys/fs/bpf/ebpfcni
    
;;

DEL)
    # When removing the Pod, remove the network container
    rm -rf /var/run/netns/$CNI_CONTAINERID
;;

CHECK)
;;

VERSION)

echo '{
  "cniVersion": "1.0.0", 
  "supportedVersions": [ "0.3.0", "0.3.1", "0.4.0", "1.0.0" ] 
}'
;;

*)
  echo "Not supported: $CNI_COMMAND" 
  exit 1
;;

esac
